{"title":"Create aliases for your classes in Laravel","coverimage":"alias.png","meta":{"index":2,"fileName":"2017-05-30-create-aliases-for-your-laravel-class.md","section":"/","dirName":"/posts"},"date":"2017-05-30","path":"/2017/05/create-aliases-for-your-laravel-class","permalink":"/2017/05/create-aliases-for-your-laravel-class","anchors":[["#create-aliases-for-your-classes-in-laravel","Create aliases for your classes in Laravel"]],"body":"<h1 id=\"create-aliases-for-your-classes-in-laravel\">Create aliases for your classes in Laravel</h1>\n<p>Hello web artisans,</p>\n<p>You might have heard of <a href=\"https://laravel.com/\" target=\"_blank\" rel=\"noopener\">Laravel</a> <em>Class Alias</em> feature. If you haven’t, here’s a brief description about them. Laravel comes with a feature called ,<em>Class Alias</em>, using which you can create an alias for any <a href=\"http://php.net/manual/en/language.oop5.basic.php\" target=\"_blank\" rel=\"noopener\">Class</a> you have created. If you look into the <em>app.php</em> file inside the <em>config</em> folder of  any Laravel installation, you will see an array at the bottom of the file named aliases which contains an array of <em>Aliases</em> as keys and your <a href=\"http://php.net/manual/en/language.namespaces.rationale.php\" target=\"_blank\" rel=\"noopener\"><em>Namespaced Classes</em></a> as values.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n       'App'=> Illuminate\\Support\\Facades\\App::class,\n       'Artisan'=> Illuminate\\Support\\Facades\\Artisan::class,\n       'Auth'=> Illuminate\\Support\\Facades\\Auth::class,\n       'Blade'=> Illuminate\\Support\\Facades\\Blade::class,\n       'Broadcast'=> Illuminate\\Support\\Facades\\Broadcast::class\n       ........\n]\n</code></pre>\n<p>Now, using this feature, whenever you want to reference your class anywhere in your project, you have to just call the <em>alias</em> and not the whole <em>Namspaced ClassName</em>. For example, if you have a class named <strong>HelloWorld</strong> in your <em>Package</em>,\nthen you can add an alias for your class just like the example given below.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n\n        'App'=> Illuminate\\Support\\Facades\\App::class,\n        'Artisan'=> Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'=> Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'=> Illuminate\\Support\\Facades\\Blade::class,\n        'Broadcast'=> Illuminate\\Support\\Facades\\Broadcast::class,\n        ........\n        'HelloWorld'=> YourPackage\\Namespace\\HelloWorld:class \n]\n</code></pre>\n<p>Now, Keep in mind that if you want to use any function from your class, it has to be an static function. As you can see, the aliases already defined in Laravel refer to <a href=\"https://laravel.com/docs/5.6/facades\" target=\"_blank\" rel=\"noopener\"><em>Facades</em></a>. In Laravel, <strong>Facades</strong> provides a static way to use instantiated classes. If you want to alias an instance of your class, you have to first <a href=\"https://laravel.com/docs/5.0/facades#creating-facades\" target=\"_blank\" rel=\"noopener\">create a Facade</a> for your class.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n        ........\n        'HelloWorld'=> YourPackage\\Namespace\\HelloWorldFacade:class, \n]\n</code></pre>\n<p>I hope you might have enjoyed reading this piece and learned something new.</p>\n<p>Happy Coding!</p>\n"}