[{"title":"Adding Multiple tld's in valet","coverimage":"laravel-valet.png","meta":{"index":0,"fileName":"2018-08-05-adding-multiple-tlds-in-valet.md","section":"/","dirName":"/posts"},"date":"2018-08-05","path":"/2018/08/adding-multiple-tlds-in-valet","permalink":"/2018/08/adding-multiple-tlds-in-valet","anchors":[["#adding-multiple-tld-s-in-valet","Adding Multiple tld's in valet"]],"body":"<h1 id=\"adding-multiple-tlds-in-valet\">Adding Multiple tld’s in valet</h1>\n<p>So, all of us use some kind of local development setup. It may be <strong><a href=\"https://www.liquidweb.com/kb/what-is-a-lamp-stack/\" target=\"_blank\" rel=\"noopener\">LAMP</a></strong>, <strong><a href=\"https://bitnami.com/stack/wamp\" target=\"_blank\" rel=\"noopener\">WAMP</a></strong>(windows), <strong><a href=\"https://en.wikipedia.org/wiki/XAMPP\" target=\"_blank\" rel=\"noopener\">XAMPP</a></strong>, <strong><a href=\"https://en.wikipedia.org/wiki/Vagrant_(software)\" target=\"_blank\" rel=\"noopener\">Vagrant</a></strong>, etc. I used to use <strong>XAMPP</strong> a lot, then I switched to <strong>Vagrant</strong> and now finally <strong><a href=\"https://github.com/laravel/valet\" target=\"_blank\" rel=\"noopener\">Valet</a></strong>.\nAfter using <strong>Valet</strong>, I can say, it offers a great development experience. Local dev enviroment setup is a breeze with <strong>Valet</strong>. Just go to your project root and run <code>valet link</code> and you are good to go (You can find more in the docs <a href=\"https://laravel.com/docs/master/valet\" target=\"_blank\" rel=\"noopener\">here</a>). Unluckily, the default project only supports <a href=\"https://en.wikipedia.org/wiki/MacOS\" target=\"_blank\" rel=\"noopener\">macOS</a>, but there are fork’s of the project for other OSes also.\n<br/><br/></p>\n<ul>\n<li><strong><a href=\"https://github.com/cpriego/valet-linux\" target=\"_blank\" rel=\"noopener\">valet-linux</a></strong> for Linux</li>\n<li><strong><a href=\"https://github.com/cretueusebiu/valet-windows\" target=\"_blank\" rel=\"noopener\">valet-windows</a></strong> for Windows\n<br/><br/></li>\n</ul>\n<h2 id=\"adding-more-than-one-tld\">Adding more than one tld</h2>\n<p>So, by default, <strong>Valet</strong> serves your projects using the <code>.test</code>  <a href=\"https://en.wikipedia.org/wiki/Top-level_domain\" target=\"_blank\" rel=\"noopener\">TLD</a>, <em>i.e.</em> if you have a project named <em>example</em>, it will be served under <code>example.test</code>. You can obviously change the <strong>tld</strong> to anything you want using the command <code>valet domain &lt;tld-name&gt;</code>. But there’s a catch. Valet let’s you serve all your projects under one <strong>tld</strong> only. But what if you want your projects to be served under multiple <strong>tld’s</strong>. Let’s say, you want to have both <code>.test</code> and <code>.dev</code>. And later, you also want to add <code>.app</code>. So, here’s a solution (more of like a hack) to add multiple <strong>tld’s</strong> to valet.</p>\n<p><strong>Valet</strong> manages all its magic using a <em>hosts</em> configuration saved in the file <code>/etc/dnsmasq.d/valet</code>. If you open that file, you will find an entry like</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">address=/.test/127.0.0.1\n</code></pre>\n<p>This tells <strong>Valet</strong> to resolve all <code>.test</code> domain names to <code>localhost</code>. Now, to add a second <strong>tld</strong>, you can either do</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">address=/.test/.dev/127.0.0.1\n</code></pre>\n<p>or</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">address=/.test/127.0.0.1\naddress=/.dev/127.0.0.1\n</code></pre>\n<p>This tells <strong>Valet</strong> to resolve both, <code>.test</code> and <code>.dev</code> domain names to <code>localhost</code>.</p>\n<p>Next step, you have to restart <strong>dnsmasq</strong> (not <strong>Valet</strong>) by running the command <code>sudo service dnsmasq restart</code>. This reconfigures <strong>dnsmasq</strong> to accept your newly added <strong>tld</strong>.</p>\n<p>Now for last step, link your site with the new <strong>tld</strong> by running <code>valet link example.dev</code>. Do not forget to add the <strong>tld</strong> after the name. That’s it.</p>\n<p>Now you can find your site served under both <code>example.test</code> and <code>example.dev</code>.</p>\n<p><strong>Note:-</strong> For any site to be served under your new <strong>tld</strong>, add the <strong>tld</strong> to the domain name while running <code>valet link</code>.</p>\n<p>Happy Coding!</p>\n"},{"title":"Extending Laravel's Application Container","coverimage":"laravel.jpg","meta":{"index":1,"fileName":"2018-05-11-extending-laravel-application-container.md","section":"/","dirName":"/posts"},"date":"2018-05-11","path":"/2018/05/extending-laravel-application-container","permalink":"/2018/05/extending-laravel-application-container","anchors":[["#extending-laravel-s-application-container","Extending Laravel's Application Container"]],"body":"<h1 id=\"extending-laravels-application-container\">Extending Laravel’s Application Container</h1>\n<p><div class=\"table-of-contents\"><ul><li><a href=\"#extending-laravel's-application-container\">Extending Laravel's Application Container</a><ul><li><a href=\"#extend-it\">Extend it</a></li><li><a href=\"#register-it\">Register it</a></li><li><a href=\"#override-(extend)-your-methods\">Override (extend) your methods</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul></li></ul></div></p>\n<p>It’s seldom that we need to extend Laravel’s core, and even when we do, it’s most likely we’re going to extend specific components, which is <a href=\"https://laravel.com/docs/5.6/container#extending-bindings\" target=\"_blank\" rel=\"noopener\">detailed in the docs</a>.</p>\n<p>However, all of these instructions presume you’re using the core Laravel Application (<a href=\"https://laravel.com/docs/5.6/container#introduction\" target=\"_blank\" rel=\"noopener\">IOC Container</a>) to extend the other classes. What if you want to extend the Application itself?</p>\n<p>So, let’s do it. Let’s take a Laravel 5 application, extend its Application, and change its <code>/storage</code> path to be <code>/localstorage</code>.</p>\n<h2 id=\"extend-it\">Extend it</h2>\n<p>First, create an application class somewhere in your namespace, and have it extend <code>Illuminate\\Foundation\\Application</code>. For example:</p>\n<pre class=\"language-php\"><code class=\"language-php\">&lt;?php namespace MyLaravelApp;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n}\n</code></pre>\n<h2 id=\"register-it\">Register it</h2>\n<p>Now, let’s find where <code>Illuminate\\Foundation\\Application</code> is bound. Thankfully, it’s simple: <code>bootstrap/app.php</code>. The first non-comment code in the file is:</p>\n<pre class=\"language-php{1}\"><code class=\"language-php{1}\">$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre>\n<p>I think you can guess what’s coming next. Just replace those lines with these:</p>\n<pre class=\"language-php{1}\"><code class=\"language-php{1}\">$app = new MyLaravelApp\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre>\n<p>That’s it. We’re now using our custom <em>Application</em> everywhere through the site.</p>\n<h2 id=\"override-(extend)-your-methods\">Override (extend) your methods</h2>\n<p>So, if our goal is to override the functionality in Application that provides the location for the <code>storage</code> directory, the final step is to find that functionality and override it.</p>\n<p>Thankfully again, a quick glance through the <code>Illuminate\\Foundation\\Application</code> class makes that very clear: there’s a method named\n<code>storagePath</code>:</p>\n<pre class=\"language-php\"><code class=\"language-php\">/**\n * Get the path to the storage directory.\n *\n * @return string\n */\n public function storagePath()\n {\n     return $this->basePath.'/storage';\n }\n</code></pre>\n<p>… so, let’s do our business. In our custom Application, let’s override that method:</p>\n<pre class=\"language-php\"><code class=\"language-php\">&lt;?php \n\nnamespace MyLaravelApp;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n    /**\n     * Get the path to the storage directory.\n     *\n     * @return string\n     */\n    public function storagePath()\n    {\n        return $this->basePath.'/localstorage';\n    }\n}\n</code></pre>\n<p>and done. We’ve now just customized this path. And, <em>of course</em>, we can use this same set of steps to extend anything else that the Application class provides to Laravel.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>That’s it! I hope this gives you the freedom and power to take more control of your Laravel-based web sites, and also the encouragement to go look around the core even more to learn how everything works.</p>\n<p>Happy Coding!</p>\n"},{"title":"Create aliases for your classes in Laravel","coverimage":"alias.png","meta":{"index":2,"fileName":"2017-05-30-create-aliases-for-your-laravel-class.md","section":"/","dirName":"/posts"},"date":"2017-05-30","path":"/2017/05/create-aliases-for-your-laravel-class","permalink":"/2017/05/create-aliases-for-your-laravel-class","anchors":[["#create-aliases-for-your-classes-in-laravel","Create aliases for your classes in Laravel"]],"body":"<h1 id=\"create-aliases-for-your-classes-in-laravel\">Create aliases for your classes in Laravel</h1>\n<p>Hello web artisans,</p>\n<p>You might have heard of <a href=\"https://laravel.com/\" target=\"_blank\" rel=\"noopener\">Laravel</a> <em>Class Alias</em> feature. If you haven’t, here’s a brief description about them. Laravel comes with a feature called ,<em>Class Alias</em>, using which you can create an alias for any <a href=\"http://php.net/manual/en/language.oop5.basic.php\" target=\"_blank\" rel=\"noopener\">Class</a> you have created. If you look into the <em>app.php</em> file inside the <em>config</em> folder of  any Laravel installation, you will see an array at the bottom of the file named aliases which contains an array of <em>Aliases</em> as keys and your <a href=\"http://php.net/manual/en/language.namespaces.rationale.php\" target=\"_blank\" rel=\"noopener\"><em>Namespaced Classes</em></a> as values.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n       'App'=> Illuminate\\Support\\Facades\\App::class,\n       'Artisan'=> Illuminate\\Support\\Facades\\Artisan::class,\n       'Auth'=> Illuminate\\Support\\Facades\\Auth::class,\n       'Blade'=> Illuminate\\Support\\Facades\\Blade::class,\n       'Broadcast'=> Illuminate\\Support\\Facades\\Broadcast::class\n       ........\n]\n</code></pre>\n<p>Now, using this feature, whenever you want to reference your class anywhere in your project, you have to just call the <em>alias</em> and not the whole <em>Namspaced ClassName</em>. For example, if you have a class named <strong>HelloWorld</strong> in your <em>Package</em>,\nthen you can add an alias for your class just like the example given below.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n\n        'App'=> Illuminate\\Support\\Facades\\App::class,\n        'Artisan'=> Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'=> Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'=> Illuminate\\Support\\Facades\\Blade::class,\n        'Broadcast'=> Illuminate\\Support\\Facades\\Broadcast::class,\n        ........\n        'HelloWorld'=> YourPackage\\Namespace\\HelloWorld:class \n]\n</code></pre>\n<p>Now, Keep in mind that if you want to use any function from your class, it has to be an static function. As you can see, the aliases already defined in Laravel refer to <a href=\"https://laravel.com/docs/5.6/facades\" target=\"_blank\" rel=\"noopener\"><em>Facades</em></a>. In Laravel, <strong>Facades</strong> provides a static way to use instantiated classes. If you want to alias an instance of your class, you have to first <a href=\"https://laravel.com/docs/5.0/facades#creating-facades\" target=\"_blank\" rel=\"noopener\">create a Facade</a> for your class.</p>\n<pre class=\"language-php\"><code class=\"language-php\">'aliases' => [\n        ........\n        'HelloWorld'=> YourPackage\\Namespace\\HelloWorldFacade:class, \n]\n</code></pre>\n<p>I hope you might have enjoyed reading this piece and learned something new.</p>\n<p>Happy Coding!</p>\n"},{"title":"What is WordPress?","meta":{"index":3,"fileName":"2015-09-08-what-is-wordpress.md","section":"/","dirName":"/posts"},"date":"2015-09-08","path":"/2015/09/what-is-wordpress","permalink":"/2015/09/what-is-wordpress","anchors":[["#what-is-word-press","What is WordPress?"]],"body":"<h1 id=\"what-is-wordpress\">What is WordPress?</h1>\n<p><a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener\">WordPress</a> is an online, <a href=\"https://en.wikipedia.org/wiki/Open-source_software\" target=\"_blank\" rel=\"noopener\">open-source</a> tool used for creating websites. By open-source, I mean, the tool is free to use, free to modify and free to share. Basically, it is a <a href=\"https://en.wikipedia.org/wiki/Content_management_system\" target=\"_blank\" rel=\"noopener\">Content Mangement System (CMS)</a> built using <a href=\"https://en.wikipedia.org/wiki/PHP\" target=\"_blank\" rel=\"noopener\">PHP</a> and <a href=\"https://en.wikipedia.org/wiki/MySQL\" target=\"_blank\" rel=\"noopener\">MySQL</a> database. Initially WordPress came out as a tool for creating blogging websites but its extensive use and popularity has evolved it to much more than that. Today it is used for creating not only blogging websites but information websites, commercial websites, networking websites, etc.</p>\n<p>Using WordPress is very easy and fun. All of the contents in a WordPress website is managed through an admin panel, that is called as <strong>Dashboard</strong>, built into WordPress itself. WordPress has a large support of themes and plugins. Themes in wordpress are design templates that are used to set the overall look of the website. Plugins are mostly used to provide extra functionality and advanced features, as per requirement, in your website that are basically not provided by WordPress. Both Themes and Plugins are managed through the Dashboard in WordPress.</p>\n<p><a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener\">wordpress.org</a> is a website which serves as a repository of themes and plugins for <strong>WordPress</strong>. The theme repository in <a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener\">wordpress.org</a> is categorised into free and premium section. The free themes are avalaible <em>free of cost</em> but premium themes can only be used after <em>purchase</em>.  It also serves as an online manual called the <a href=\"https://codex.wordpress.org/\" target=\"_blank\" rel=\"noopener\">codex</a> for WordPress and has a large supporting community of WordPress developers that can help you if you are stuck with something in WordPress. The users can also create their own themes and plugins, if they have the knowledge to do so, and share those through <a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener\">wordpress.org</a>.</p>\n"},{"title":"Programming in Node.js : What is Node.js?","meta":{"index":4,"fileName":"2015-06-24-programming-in-nodejs.md","section":"/","dirName":"/posts"},"date":"2015-06-24","path":"/2015/06/programming-in-nodejs","permalink":"/2015/06/programming-in-nodejs","anchors":[["#programming-in-node-js-what-is-node-js","Programming in Node.js : What is Node.js?"]],"body":"<h1 id=\"programming-in-nodejs-what-is-nodejs\">Programming in Node.js : What is Node.js?</h1>\n<p><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a> is a server-side technology that’s based on <a href=\"https://github.com/v8/v8\" target=\"_blank\" rel=\"noopener\">Google’s V8</a> JavaScript engine. It’s a highly scalable system that uses <a href=\"https://en.wikipedia.org/wiki/Asynchronous_I/O\" target=\"_blank\" rel=\"noopener\">asynchronous event-driven I/O</a> (input/output), rather than threads or separate processes. It’s ideal for web applications that are frequently accessed, but computationally simple. If you’re using a traditional web server, such as <a href=\"http://www.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache</a>, each time a web resource is requested, Apache creates a separate thread or invokes a new process in order to process the request. Even though Apache responds quickly to requests, and cleans up after the request has been satisfied, this approach can still tie up a lot of resources. A popular web application is going to have serious performance issues.</p>\n<p>Node, on the other hand, doesn’t create a new thread or process for every request. Instead, it listens for specific events, and when the event happens, responds accordingly. Node doesn’t block any other request while waiting for the event functionality to complete, and events are processed, first come, first served, in a relatively uncomplicated event loop.</p>\n<p>Node applications are created with JavaScript (or alternative language that compiles to JavaScript). The JavaScript is the same as you’d use in your client-side applications. However, unlike JavaScript in a browser, you have to set up a environment for Node. Node can be installed in a <a href=\"https://en.wikipedia.org/wiki/Linux\" target=\"_blank\" rel=\"noopener\">Linux</a>, <a href=\"https://en.wikipedia.org/wiki/Macintosh_operating_systems\" target=\"_blank\" rel=\"noopener\">Mac OS</a>, or <a href=\"https://en.wikipedia.org/wiki/Microsoft_Windows\" target=\"_blank\" rel=\"noopener\">Windows</a> environment. In the next blog, I am going to walk you through setting up a development environment for Node in Linux (<a href=\"https://en.wikipedia.org/wiki/Ubuntu_(operating_system)\" target=\"_blank\" rel=\"noopener\">Ubuntu</a>). Installation on a Mac should be similar to installation on Linux.</p>\n<p>I’m will also be covering any requirements or preparation you need to take before installing the application. Once your development environment is operational, I’m going to demonstrate a basic Node application and walk you through the important bits, the event loop I mentioned earlier, so you can try Node yourself.</p>\n"}]