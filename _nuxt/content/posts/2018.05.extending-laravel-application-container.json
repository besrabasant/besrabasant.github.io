{"title":"Extending Laravel's Application Container","coverimage":"laravel.jpg","meta":{"index":1,"fileName":"2018-05-11-extending-laravel-application-container.md","section":"/","dirName":"/posts"},"date":"2018-05-11","path":"/2018/05/extending-laravel-application-container","permalink":"/2018/05/extending-laravel-application-container","anchors":[["#extending-laravel-s-application-container","Extending Laravel's Application Container"]],"body":"<h1 id=\"extending-laravels-application-container\">Extending Laravel’s Application Container</h1>\n<p><div class=\"table-of-contents\"><ul><li><a href=\"#extending-laravel's-application-container\">Extending Laravel's Application Container</a><ul><li><a href=\"#extend-it\">Extend it</a></li><li><a href=\"#register-it\">Register it</a></li><li><a href=\"#override-(extend)-your-methods\">Override (extend) your methods</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul></li></ul></div></p>\n<p>It’s seldom that we need to extend Laravel’s core, and even when we do, it’s most likely we’re going to extend specific components, which is <a href=\"https://laravel.com/docs/5.6/container#extending-bindings\" target=\"_blank\" rel=\"noopener\">detailed in the docs</a>.</p>\n<p>However, all of these instructions presume you’re using the core Laravel Application (<a href=\"https://laravel.com/docs/5.6/container#introduction\" target=\"_blank\" rel=\"noopener\">IOC Container</a>) to extend the other classes. What if you want to extend the Application itself?</p>\n<p>So, let’s do it. Let’s take a Laravel 5 application, extend its Application, and change its <code>/storage</code> path to be <code>/localstorage</code>.</p>\n<h2 id=\"extend-it\">Extend it</h2>\n<p>First, create an application class somewhere in your namespace, and have it extend <code>Illuminate\\Foundation\\Application</code>. For example:</p>\n<pre class=\"language-php\"><code class=\"language-php\">&lt;?php namespace MyLaravelApp;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n}\n</code></pre>\n<h2 id=\"register-it\">Register it</h2>\n<p>Now, let’s find where <code>Illuminate\\Foundation\\Application</code> is bound. Thankfully, it’s simple: <code>bootstrap/app.php</code>. The first non-comment code in the file is:</p>\n<pre class=\"language-php{1}\"><code class=\"language-php{1}\">$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre>\n<p>I think you can guess what’s coming next. Just replace those lines with these:</p>\n<pre class=\"language-php{1}\"><code class=\"language-php{1}\">$app = new MyLaravelApp\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre>\n<p>That’s it. We’re now using our custom <em>Application</em> everywhere through the site.</p>\n<h2 id=\"override-(extend)-your-methods\">Override (extend) your methods</h2>\n<p>So, if our goal is to override the functionality in Application that provides the location for the <code>storage</code> directory, the final step is to find that functionality and override it.</p>\n<p>Thankfully again, a quick glance through the <code>Illuminate\\Foundation\\Application</code> class makes that very clear: there’s a method named\n<code>storagePath</code>:</p>\n<pre class=\"language-php\"><code class=\"language-php\">/**\n * Get the path to the storage directory.\n *\n * @return string\n */\n public function storagePath()\n {\n     return $this->basePath.'/storage';\n }\n</code></pre>\n<p>… so, let’s do our business. In our custom Application, let’s override that method:</p>\n<pre class=\"language-php\"><code class=\"language-php\">&lt;?php \n\nnamespace MyLaravelApp;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n    /**\n     * Get the path to the storage directory.\n     *\n     * @return string\n     */\n    public function storagePath()\n    {\n        return $this->basePath.'/localstorage';\n    }\n}\n</code></pre>\n<p>and done. We’ve now just customized this path. And, <em>of course</em>, we can use this same set of steps to extend anything else that the Application class provides to Laravel.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>That’s it! I hope this gives you the freedom and power to take more control of your Laravel-based web sites, and also the encouragement to go look around the core even more to learn how everything works.</p>\n<p>Happy Coding!</p>\n"}